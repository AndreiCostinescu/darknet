# Config file for the Darknet package

set(@PROJECT_NAME@_EXTERNAL_LIBRARIES )

get_filename_component(Darknet_CMAKE_DIR "${CMAKE_CURRENT_LIST_FILE}" PATH)
list(APPEND CMAKE_MODULE_PATH "${Darknet_CMAKE_DIR}")

include(CMakeFindDependencyMacro)

if(@OpenCV_FOUND@)
  find_dependency(OpenCV)
endif()

if(@ENABLE_CUDA@)
  include(CheckLanguage)
  check_language(CUDA)
  if(NOT CMAKE_CUDA_COMPILER)
    message(STATUS " --> WARNING: Unable to find native CUDA integration!")
  endif()
  find_dependency(CUDA)
  cuda_select_nvcc_arch_flags(CUDA_ARCH_FLAGS ${CUDA_ARCHITECTURES})
  if(@CUDNN_FOUND@)
    find_dependency(CUDNN)
  endif()
endif()

set(CMAKE_THREAD_PREFER_PTHREAD ON)
find_dependency(Threads)

if(MSVC)
  find_dependency(PThreads_windows)
  set(CMAKE_CXX_FLAGS "/wd4018 /wd4244 /wd4267 /wd4305 ${CMAKE_CXX_FLAGS}")
endif()

if(@OPENMP_FOUND@)
  find_dependency(OpenMP)
endif()

# Our library dependencies (contains definitions for IMPORTED targets)
include("${Darknet_CMAKE_DIR}/DarknetTargets.cmake")
include("${Darknet_CMAKE_DIR}/DarknetConfigVersion.cmake")

### CHECK THE REQUESTED COMPONENTS ###

set(@PROJECT_NAME@_COMPONENTS "core" "realsense")

if(NOT @PROJECT_NAME@_FIND_COMPONENTS)
    set(@PROJECT_NAME@_FIND_COMPONENTS "core" "realsense")
endif()
message("@PROJECT_NAME@ requested components: ${@PROJECT_NAME@_FIND_COMPONENTS}")

set(@PROJECT_NAME@_REQUEST_REALSENSE 0)
foreach(__@PROJECT_NAME@_component ${@PROJECT_NAME@_FIND_COMPONENTS})
    string(TOLOWER "${__@PROJECT_NAME@_component}" __@PROJECT_NAME@_componentLOW)
    if ("${__@PROJECT_NAME@_component}" MATCHES "realsense")
        set(@PROJECT_NAME@_REQUEST_REALSENSE 1)
    endif()
endforeach()

### ADD EXTERNAL DEPENDENCIES IF NEEDED: realsense ###

if (${@PROJECT_NAME@_REQUEST_REALSENSE})
    if ((NOT DEFINED realsense2_FOUND) OR (NOT ${realsense2_FOUND}))
        find_package(realsense2 REQUIRED)
        include_directories(${realsense2_INCLUDE_DIRS})
        set(@PROJECT_NAME@_EXTERNAL_LIBRARIES ${realsense2_LIBRARY} ${@PROJECT_NAME@_EXTERNAL_LIBRARIES})
    endif ()
endif ()

### START POPULATING @PROJECT_NAME@_INCLUDE and @PROJECT_NAME@_LIBRARY variables

set(@PROJECT_NAME@_LIBRARY ${@PROJECT_NAME@_EXTERNAL_LIBRARIES} ${@PROJECT_NAME@_LIBRARY})  # might contain components from previous includes

### ADD THE REQUESTED COMPONENTS TO @PROJECT_NAME@_LIBRARY ###

# first, iterate through the components because of inter-dependencies-ordering
foreach(__@PROJECT_NAME@_component ${@PROJECT_NAME@_COMPONENTS})
    list(FIND @PROJECT_NAME@_FIND_COMPONENTS ${__@PROJECT_NAME@_component} __componentIdx)
    if(__componentIdx LESS 0)
        continue()
    endif ()
    string(TOLOWER "${__@PROJECT_NAME@_component}" __@PROJECT_NAME@_componentLOW)
    if ("${__@PROJECT_NAME@_componentLOW}" STREQUAL "core")
        set(@PROJECT_NAME@_LIBRARY @PROJECT_NAME@::dark ${@PROJECT_NAME@_LIBRARY})
        set(${__@PROJECT_NAME@_componentUP}_FOUND 1)  # indicate that module is found
        set(@PROJECT_NAME@_${__@PROJECT_NAME@_component}_FOUND TRUE)  # indicate that module is found
    elseif ("${__@PROJECT_NAME@_componentLOW}" STREQUAL "realsense")
        set(@PROJECT_NAME@_LIBRARY @PROJECT_NAME@::dark_realsense ${@PROJECT_NAME@_LIBRARY})
        set(${__@PROJECT_NAME@_componentUP}_FOUND 1)  # indicate that module is found
        set(@PROJECT_NAME@_${__@PROJECT_NAME@_component}_FOUND TRUE)  # indicate that module is found
    else ()
        message(WARNING "Unknown component/module/target ${__@PROJECT_NAME@_componentLOW}")
    endif ()
endforeach ()

### SET THE NOT FOUND COMPONENTS! ###

# second, iterate through the requested components and check if found or not...
foreach(__@PROJECT_NAME@_component ${@PROJECT_NAME@_FIND_COMPONENTS})
    if (NOT @PROJECT_NAME@_${__@PROJECT_NAME@_component}_FOUND)
        # Either the component is required or the user did not set any components at all.
        # In the latter case, the @PROJECT_NAME@_FIND_REQUIRED_<component> variable will not be defined
        # since it is not set by this config. So let's assume the implicitly set components are always required.
        if(NOT DEFINED @PROJECT_NAME@_FIND_REQUIRED_${__@PROJECT_NAME@_component} OR @PROJECT_NAME@_FIND_REQUIRED_${__@PROJECT_NAME@_component})
            message(FATAL_ERROR "${__@PROJECT_NAME@_component} is required but was not found")
        elseif(NOT @PROJECT_NAME@_FIND_QUIETLY)
            # The component was marked as optional using OPTIONAL_COMPONENTS
            message(WARNING "Optional component ${__@PROJECT_NAME@_component} was not found")
        endif()
        #indicate that module is NOT found
        string(TOUPPER "${__@PROJECT_NAME@_component}" __@PROJECT_NAME@_componentUP)
        set(${__@PROJECT_NAME@_componentUP}_FOUND "${__@PROJECT_NAME@_componentUP}_FOUND-NOTFOUND")
        set(@PROJECT_NAME@_${__@PROJECT_NAME@_component}_FOUND FALSE)
    endif()
endforeach()

check_required_components(@PROJECT_NAME@)

get_target_property(FULL_DARKNET_INCLUDE_DIRS Darknet::dark INTERFACE_INCLUDE_DIRECTORIES)
message("FULL_DARKNET_INCLUDE_DIRS = ${FULL_DARKNET_INCLUDE_DIRS}")
list(GET FULL_DARKNET_INCLUDE_DIRS 0 Darknet_INCLUDE_DIR)
get_filename_component(Darknet_INCLUDE_DIR "${Darknet_INCLUDE_DIR}" REALPATH)
set_and_check(@PROJECT_NAME@_INCLUDE ${Darknet_INCLUDE_DIR})

find_package_handle_standard_args(Darknet REQUIRED_VARS Darknet_INCLUDE_DIR VERSION_VAR PACKAGE_VERSION)
