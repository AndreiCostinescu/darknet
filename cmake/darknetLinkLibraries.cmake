target_compile_definitions(darknet PRIVATE -DUSE_CMAKE_LIBS)
target_compile_definitions(dark PRIVATE -DUSE_CMAKE_LIBS)
target_compile_definitions(uselib PRIVATE -DUSE_CMAKE_LIBS)

if (OpenCV_FOUND AND OpenCV_VERSION VERSION_GREATER "3.0" AND BUILD_USELIB_TRACK AND NOT MANUALLY_EXPORT_TRACK_OPTFLOW)
    target_compile_definitions(dark PUBLIC TRACK_OPTFLOW=1)
endif ()

if (CUDNN_FOUND)
    target_link_libraries(darknet PRIVATE CuDNN::CuDNN)
    target_link_libraries(dark PRIVATE CuDNN::CuDNN)
    target_compile_definitions(darknet PRIVATE -DCUDNN)
    target_compile_definitions(dark PUBLIC -DCUDNN)
    if (ENABLE_CUDNN_HALF)
        target_compile_definitions(darknet PRIVATE -DCUDNN_HALF)
        target_compile_definitions(dark PUBLIC -DCUDNN_HALF)
    endif ()
endif ()

if (OpenCV_FOUND)
    target_link_libraries(darknet PRIVATE ${OpenCV_LINKED_COMPONENTS})
    target_link_libraries(uselib PRIVATE ${OpenCV_LINKED_COMPONENTS})
    target_link_libraries(dark PUBLIC ${OpenCV_LINKED_COMPONENTS})
    target_include_directories(dark PUBLIC ${OpenCV_INCLUDE_DIRS})
    target_compile_definitions(darknet PRIVATE -DDARKNET_USE_OPENCV)
    target_compile_definitions(dark PUBLIC -DDARKNET_USE_OPENCV)
endif ()

if (ENABLE_REALSENSE)
    target_link_libraries(darknet PRIVATE ${realsense2_LINKED_COMPONENTS})
    target_link_libraries(uselib PRIVATE ${realsense2_LINKED_COMPONENTS})
    target_link_libraries(dark PUBLIC ${realsense2_LINKED_COMPONENTS})
    target_compile_definitions(darknet PRIVATE -DDARKNET_USE_REALSENSE)
    target_compile_definitions(dark PUBLIC -DDARKNET_USE_REALSENSE)
endif ()

if (OPENMP_FOUND)
    target_link_libraries(darknet PRIVATE OpenMP::OpenMP_CXX)
    target_link_libraries(darknet PRIVATE OpenMP::OpenMP_C)
    target_link_libraries(dark PUBLIC OpenMP::OpenMP_CXX)
    target_link_libraries(dark PUBLIC OpenMP::OpenMP_C)
endif ()

if (CMAKE_COMPILER_IS_GNUCC)
    target_link_libraries(darknet PRIVATE m)
    target_link_libraries(dark PUBLIC m)
endif ()

if (MSVC)
    target_link_libraries(darknet PRIVATE PThreads_windows::PThreads_windows)
    target_link_libraries(darknet PRIVATE wsock32)
    target_link_libraries(dark PUBLIC PThreads_windows::PThreads_windows)
    target_link_libraries(dark PUBLIC wsock32)
    target_link_libraries(uselib PRIVATE PThreads_windows::PThreads_windows)
    target_compile_definitions(darknet PRIVATE -D_CRT_RAND_S -DNOMINMAX -D_USE_MATH_DEFINES)
    target_compile_definitions(dark PRIVATE -D_CRT_RAND_S -DNOMINMAX -D_USE_MATH_DEFINES)
    target_compile_definitions(dark PUBLIC -D_CRT_SECURE_NO_WARNINGS)
    target_compile_definitions(uselib PRIVATE -D_CRT_RAND_S -DNOMINMAX -D_USE_MATH_DEFINES)
endif ()

if (MSVC OR MINGW)
    target_link_libraries(darknet PRIVATE ws2_32)
    target_link_libraries(dark PUBLIC ws2_32)
endif ()

target_link_libraries(darknet PRIVATE Threads::Threads)
target_link_libraries(dark PUBLIC Threads::Threads)
target_link_libraries(uselib PRIVATE Threads::Threads)

if (ENABLE_ZED_CAMERA)
    target_link_libraries(darknet PRIVATE ${ZED_LIBRARIES})
    target_link_libraries(dark PUBLIC ${ZED_LIBRARIES})
    target_link_libraries(uselib PRIVATE ${ZED_LIBRARIES})
    target_compile_definitions(darknet PRIVATE -DZED_STEREO)
    target_compile_definitions(uselib PRIVATE -DZED_STEREO)
    target_compile_definitions(dark PUBLIC -DZED_STEREO)
endif ()

if (ENABLE_CUDA)
    target_include_directories(darknet PRIVATE ${CMAKE_CUDA_TOOLKIT_INCLUDE_DIRECTORIES})
    target_include_directories(dark PUBLIC ${CMAKE_CUDA_TOOLKIT_INCLUDE_DIRECTORIES})
    target_link_libraries(darknet PRIVATE curand cublas cuda)
    target_link_libraries(dark PRIVATE curand cublas cuda)
    set_target_properties(dark PROPERTIES CUDA_RESOLVE_DEVICE_SYMBOLS ON)
    target_compile_definitions(darknet PRIVATE -DGPU)
    target_compile_definitions(dark PUBLIC -DGPU)
endif ()

if (USE_INTEGRATED_LIBS)
    target_compile_definitions(darknet PRIVATE -D_TIMESPEC_DEFINED)
    target_compile_definitions(dark PRIVATE -D_TIMESPEC_DEFINED)
endif ()

target_link_libraries(uselib PRIVATE dark)
if (OpenCV_FOUND AND OpenCV_VERSION VERSION_GREATER "3.0" AND BUILD_USELIB_TRACK)
    target_link_libraries(uselib_track PRIVATE dark)
    target_compile_definitions(uselib_track PRIVATE TRACK_OPTFLOW=1)
    target_compile_definitions(uselib_track PRIVATE -DUSE_CMAKE_LIBS)
    if (BUILD_AS_CPP)
        set_target_properties(uselib_track PROPERTIES LINKER_LANGUAGE CXX)
    endif ()
    target_include_directories(uselib_track PRIVATE ${CMAKE_CURRENT_LIST_DIR}/../include)
    target_link_libraries(uselib_track PRIVATE ${OpenCV_LINKED_COMPONENTS})
    if (ENABLE_ZED_CAMERA)
        target_link_libraries(uselib_track PRIVATE ${ZED_LIBRARIES})
        target_compile_definitions(uselib_track PRIVATE -DZED_STEREO)
    endif ()
    if (MSVC)
        target_link_libraries(uselib_track PRIVATE PThreads_windows::PThreads_windows)
        target_compile_definitions(uselib_track PRIVATE -D_CRT_RAND_S -DNOMINMAX -D_USE_MATH_DEFINES)
    endif ()
    target_link_libraries(uselib_track PRIVATE Threads::Threads)
endif ()
